name: Build
run-name: Build ${{ inputs.os }}-${{ inputs.arch }}-v${{ inputs.version }}${{ inputs.fips && '+fips' || '' }}

on:
  workflow_call:
    inputs:
      version:
        description: Envoy version to build (don't include leading v)
        type: string
        required: true
      arch:
        description: Architecture to build Envoy for Linux
        type: string
        required: true
      os:
        description: OS to build Envoy for
        type: string
        required: true
      fips:
        description: Build FIPS (only linux amd64)
        required: false
        default: false
        type: boolean
    secrets:
      AWS_ACCOUNT_ID:
        description: AWS account ID for infrastructure
        required: true
  workflow_dispatch:
    inputs:
      version:
        description: Envoy version to build (don't include leading v)
        type: string
        required: true
      arch:
        options:
          - amd64
          - arm64
        description: Architecture to build Envoy for Linux
        type: choice
        required: true
      os:
        options:
          - darwin
          - linux
          - windows
        description: OS to build Envoy for
        type: choice
        required: true
      fips:
        description: Build FIPS (only linux amd64)
        required: false
        default: false
        type: boolean
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 180
    if: inputs.os != 'windows' || (!startsWith(inputs.version, '1.3') && inputs.version != 'main')
    steps:
      - uses: actions/checkout@v4
      # TODO use aws ssm
      - name: Generate SSH key
        run: |
          if [[ "${{ inputs.os }}" == windows ]]; then
            ssh-keygen -t rsa -b 4096 -q -N "" -f ~/.ssh/id_aws
          else
            ssh-keygen -t ed25519 -q -N "" -f ~/.ssh/id_aws
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/envoy-ci
          role-duration-seconds: 10800
          aws-region: us-east-2
      - uses: hashicorp/setup-terraform@v3.1.2
      - run: terraform init
        working-directory: terraform
      - name: Find Mac OS dedicated host
        if: inputs.os == 'darwin'
        working-directory: terraform
        run: |
          ./find-or-create-host.sh '${{ inputs.arch }}'
      - name: Set terraform variables
        working-directory: terraform
        run: |
          cat <<EOF >> terraform.tfvars
          public_key_path = "~/.ssh/id_aws.pub"
          arch = "${{ inputs.arch }}"
          os = "${{ inputs.os }}"
          fips = ${{ inputs.fips }}
          envoy_version = "${{ inputs.version }}"
          EOF

          if [[ "${{ inputs.os }}" == linux ]]; then
            echo "SSH_USER=admin" >> $GITHUB_ENV
          else
            echo "SSH_USER=ec2-user" >> $GITHUB_ENV
          fi
      - run: terraform apply -input=false -auto-approve
        working-directory: terraform
        id: terraform-apply
      - id: public-ip
        working-directory: terraform
        # setup-terraform saves stdout of terraform calls to outputs
        run: terraform output --raw public_ip
      - id: instance-id
        working-directory: terraform
        # setup-terraform saves stdout of terraform calls to outputs
        run: terraform output -raw instance_id
      - name: Wait for VM to be ready
        working-directory: terraform
        timeout-minutes: 90
        run: |
          if [[ "${{ inputs.os }}" == windows ]]; then
            ./wait-windows-host.sh '${{ steps.instance-id.outputs.stdout }}'
          else
            while ! timeout 10 ssh -i ~/.ssh/id_aws -o BatchMode=yes -o StrictHostKeyChecking=accept-new ${{ env.SSH_USER }}@${{ steps.public-ip.outputs.stdout }} 'test -e ready'
            do
              sleep 5
            done
          fi
      - name: Build Envoy
        if: inputs.os != 'windows'
        run: |
          ssh -i ~/.ssh/id_aws ${{ env.SSH_USER }}@${{ steps.public-ip.outputs.stdout }} <<'EOF'
            set -e
            if [[ "${{ inputs.os }}" == darwin ]]; then
              export PATH="/opt/homebrew/bin:$PATH"
              export BAZEL_BUILD_EXTRA_OPTIONS="--copt=-mmacos-version-min=12.7 --host_copt=-mmacos-version-min=12.7"
            fi

            export ENVOY_VERSION="${{ inputs.version }}"
            REPO="${{ github.repository }}"
            git clone "https://github.com/$REPO" && cd "${REPO#${{ github.repository_owner }}/}"
            git checkout ${{ github.sha }}

            if [[ ${{ inputs.fips }} == true ]]; then
              make build/envoy/fips
            else
              make build/envoy
            fi

            mv build ..
          EOF
      - name: Build Envoy Windows
        if: inputs.os == 'windows'
        working-directory: terraform
        run: ./build-windows.sh '${{ steps.instance-id.outputs.stdout }}' '${{ inputs.version }}'
      - name: Download Envoy binaries
        run: |
          if [[ ${{ inputs.os }} == windows ]]; then
            if [[ ${{ inputs.version }} == main ]]; then
              version=main
            else
              version=v${{ inputs.version }}
            fi
            mkdir envoy
            aws s3 cp s3://envoy-windows-binary/envoy_binary_$version.tar.gz .
            tar xzf envoy_binary_$version.tar.gz
            mv envoy.exe envoy/envoy-$version
          else
            envoy_dir="~/build/artifacts-${{ inputs.os }}-${{ inputs.arch }}/envoy"
            scp -i ~/.ssh/id_aws -o StrictHostKeyChecking=no -r ${{ env.SSH_USER }}@${{ steps.public-ip.outputs.stdout }}:${envoy_dir} .
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: envoy-${{ inputs.os }}-${{ inputs.arch }}-${{ inputs.fips }}
          path: envoy/
          if-no-files-found: error
      - run: terraform destroy -input=false -auto-approve
        working-directory: terraform
        if: always() && steps.terraform-apply.outcome != 'skipped'
